// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineComputerShop.Dal;

namespace OnlineComputerShop.Dal.Migrations
{
    [DbContext(typeof(OnlineComputerShopContext))]
    [Migration("20201127232602_Product_Quantity")]
    partial class Product_Quantity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1ffa7f0-4e91-4ec7-929f-0d8d41ee06c9"),
                            Name = "Alaplapok"
                        },
                        new
                        {
                            Id = new Guid("61f9f877-85b8-42b1-a5a0-ffeba89b596b"),
                            Name = "Processzorok"
                        },
                        new
                        {
                            Id = new Guid("50382070-40b1-42e9-a22d-0c79af948cfd"),
                            Name = "Memóriák"
                        });
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.CategorySocket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SocketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SocketId");

                    b.ToTable("CategorySockets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bcd10130-ba36-4f5e-b93a-cd5b557adae8"),
                            CategoryId = new Guid("f1ffa7f0-4e91-4ec7-929f-0d8d41ee06c9"),
                            SocketId = new Guid("e48a3661-51c1-4638-87da-7d7bdf6b459f")
                        },
                        new
                        {
                            Id = new Guid("b1893112-fea5-46fb-9d08-3bfdc5ac4284"),
                            CategoryId = new Guid("f1ffa7f0-4e91-4ec7-929f-0d8d41ee06c9"),
                            SocketId = new Guid("7190a380-dc61-44db-b4e1-1111c9c11d57")
                        },
                        new
                        {
                            Id = new Guid("5a2ed25d-8d27-4b2f-946d-80b81102f10a"),
                            CategoryId = new Guid("f1ffa7f0-4e91-4ec7-929f-0d8d41ee06c9"),
                            SocketId = new Guid("9ebfab45-564a-45cd-b787-289fe75cf433")
                        },
                        new
                        {
                            Id = new Guid("136a1f85-f331-46f0-85f8-53a578edbc6c"),
                            CategoryId = new Guid("f1ffa7f0-4e91-4ec7-929f-0d8d41ee06c9"),
                            SocketId = new Guid("c41c004d-0b61-4576-a732-27c1ae5b3785")
                        },
                        new
                        {
                            Id = new Guid("dbaa3025-fbee-4bed-83d1-daaf7bb5b1ce"),
                            CategoryId = new Guid("61f9f877-85b8-42b1-a5a0-ffeba89b596b"),
                            SocketId = new Guid("e48a3661-51c1-4638-87da-7d7bdf6b459f")
                        },
                        new
                        {
                            Id = new Guid("bcb1475d-34f3-4c15-a418-a57c19913bcf"),
                            CategoryId = new Guid("61f9f877-85b8-42b1-a5a0-ffeba89b596b"),
                            SocketId = new Guid("7190a380-dc61-44db-b4e1-1111c9c11d57")
                        },
                        new
                        {
                            Id = new Guid("91f6300a-53fa-4f48-8f94-8f4c2b253e54"),
                            CategoryId = new Guid("50382070-40b1-42e9-a22d-0c79af948cfd"),
                            SocketId = new Guid("9ebfab45-564a-45cd-b787-289fe75cf433")
                        },
                        new
                        {
                            Id = new Guid("724e0f4b-7097-4c1d-adce-add2da917608"),
                            CategoryId = new Guid("50382070-40b1-42e9-a22d-0c79af948cfd"),
                            SocketId = new Guid("c41c004d-0b61-4576-a732-27c1ae5b3785")
                        });
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeOfOrder")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PricePerPiece")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a97b0b5-49b3-4edc-bb95-128252180473"),
                            CategoryId = new Guid("f1ffa7f0-4e91-4ec7-929f-0d8d41ee06c9"),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce dapibus ornare erat. Morbi lacinia pellentesque molestie. Aenean finibus, ipsum eu ultrices lobortis, lorem arcu suscipit neque, vel ullamcorper leo felis at sapien. Vestibulum ut neque quis est consectetur molestie. Aliquam sed rhoncus neque, a lobortis sapien. Suspendisse euismod non lorem nec mollis. Donec et venenatis tellus. Vivamus nisl turpis, sodales sed dolor at, porta consequat erat. Mauris aliquet odio risus, sed vehicula mi porta eleifend. Nullam faucibus gravida sapien id sagittis. Suspendisse vulputate tincidunt leo ut sagittis.",
                            Name = "Gigabyte Z97P-D3",
                            Price = 32000,
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("b30a9a31-0990-46d2-b7df-10010854e382"),
                            CategoryId = new Guid("f1ffa7f0-4e91-4ec7-929f-0d8d41ee06c9"),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce dapibus ornare erat. Morbi lacinia pellentesque molestie. Aenean finibus, ipsum eu ultrices lobortis, lorem arcu suscipit neque, vel ullamcorper leo felis at sapien. Vestibulum ut neque quis est consectetur molestie. Aliquam sed rhoncus neque, a lobortis sapien. Suspendisse euismod non lorem nec mollis. Donec et venenatis tellus. Vivamus nisl turpis, sodales sed dolor at, porta consequat erat. Mauris aliquet odio risus, sed vehicula mi porta eleifend. Nullam faucibus gravida sapien id sagittis. Suspendisse vulputate tincidunt leo ut sagittis.",
                            Name = "Gigabyte H631-X2",
                            Price = 21000,
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("6aee5bea-5dd9-4e03-97e2-a59ea2e6cbc2"),
                            CategoryId = new Guid("61f9f877-85b8-42b1-a5a0-ffeba89b596b"),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce dapibus ornare erat. Morbi lacinia pellentesque molestie. Aenean finibus, ipsum eu ultrices lobortis, lorem arcu suscipit neque, vel ullamcorper leo felis at sapien. Vestibulum ut neque quis est consectetur molestie. Aliquam sed rhoncus neque, a lobortis sapien. Suspendisse euismod non lorem nec mollis. Donec et venenatis tellus. Vivamus nisl turpis, sodales sed dolor at, porta consequat erat. Mauris aliquet odio risus, sed vehicula mi porta eleifend. Nullam faucibus gravida sapien id sagittis. Suspendisse vulputate tincidunt leo ut sagittis.",
                            Name = "Intel Core i5-8500",
                            Price = 61000,
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("b782f182-3802-4ef8-8e49-f8a48f1fd8a3"),
                            CategoryId = new Guid("61f9f877-85b8-42b1-a5a0-ffeba89b596b"),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce dapibus ornare erat. Morbi lacinia pellentesque molestie. Aenean finibus, ipsum eu ultrices lobortis, lorem arcu suscipit neque, vel ullamcorper leo felis at sapien. Vestibulum ut neque quis est consectetur molestie. Aliquam sed rhoncus neque, a lobortis sapien. Suspendisse euismod non lorem nec mollis. Donec et venenatis tellus. Vivamus nisl turpis, sodales sed dolor at, porta consequat erat. Mauris aliquet odio risus, sed vehicula mi porta eleifend. Nullam faucibus gravida sapien id sagittis. Suspendisse vulputate tincidunt leo ut sagittis.",
                            Name = "Intel Core i3-4300",
                            Price = 27000,
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("90a79691-4f7d-43b2-875c-fe44d3fcfdde"),
                            CategoryId = new Guid("50382070-40b1-42e9-a22d-0c79af948cfd"),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce dapibus ornare erat. Morbi lacinia pellentesque molestie. Aenean finibus, ipsum eu ultrices lobortis, lorem arcu suscipit neque, vel ullamcorper leo felis at sapien. Vestibulum ut neque quis est consectetur molestie. Aliquam sed rhoncus neque, a lobortis sapien. Suspendisse euismod non lorem nec mollis. Donec et venenatis tellus. Vivamus nisl turpis, sodales sed dolor at, porta consequat erat. Mauris aliquet odio risus, sed vehicula mi porta eleifend. Nullam faucibus gravida sapien id sagittis. Suspendisse vulputate tincidunt leo ut sagittis.",
                            Name = "Kingston 8G198984135HUAA",
                            Price = 20000,
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("6381e5b5-8d60-4109-9fe8-6fcfb73e20ea"),
                            CategoryId = new Guid("50382070-40b1-42e9-a22d-0c79af948cfd"),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce dapibus ornare erat. Morbi lacinia pellentesque molestie. Aenean finibus, ipsum eu ultrices lobortis, lorem arcu suscipit neque, vel ullamcorper leo felis at sapien. Vestibulum ut neque quis est consectetur molestie. Aliquam sed rhoncus neque, a lobortis sapien. Suspendisse euismod non lorem nec mollis. Donec et venenatis tellus. Vivamus nisl turpis, sodales sed dolor at, porta consequat erat. Mauris aliquet odio risus, sed vehicula mi porta eleifend. Nullam faucibus gravida sapien id sagittis. Suspendisse vulputate tincidunt leo ut sagittis.",
                            Name = "Kinston 4G988498412333EE",
                            Price = 15000,
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.ProductSocket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfSocket")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProvidesUses")
                        .HasColumnType("int");

                    b.Property<Guid>("SocketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SocketId");

                    b.ToTable("ProductSockets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6103102-7067-4f9a-80b7-f696b0f4988a"),
                            NumberOfSocket = 1,
                            ProductId = new Guid("7a97b0b5-49b3-4edc-bb95-128252180473"),
                            ProvidesUses = 0,
                            SocketId = new Guid("e48a3661-51c1-4638-87da-7d7bdf6b459f")
                        },
                        new
                        {
                            Id = new Guid("9889871d-abd8-4e50-93e6-1294df5dd751"),
                            NumberOfSocket = 1,
                            ProductId = new Guid("7a97b0b5-49b3-4edc-bb95-128252180473"),
                            ProvidesUses = 0,
                            SocketId = new Guid("9ebfab45-564a-45cd-b787-289fe75cf433")
                        },
                        new
                        {
                            Id = new Guid("3b367888-5194-4d44-8ac9-499f381a3980"),
                            NumberOfSocket = 1,
                            ProductId = new Guid("b30a9a31-0990-46d2-b7df-10010854e382"),
                            ProvidesUses = 0,
                            SocketId = new Guid("7190a380-dc61-44db-b4e1-1111c9c11d57")
                        },
                        new
                        {
                            Id = new Guid("ee3ff4e6-56ae-4f00-ad5a-3bf135bb8802"),
                            NumberOfSocket = 1,
                            ProductId = new Guid("b30a9a31-0990-46d2-b7df-10010854e382"),
                            ProvidesUses = 0,
                            SocketId = new Guid("c41c004d-0b61-4576-a732-27c1ae5b3785")
                        },
                        new
                        {
                            Id = new Guid("2ea916a6-30fd-40b1-87e1-10f9c047e49f"),
                            NumberOfSocket = 1,
                            ProductId = new Guid("6aee5bea-5dd9-4e03-97e2-a59ea2e6cbc2"),
                            ProvidesUses = 1,
                            SocketId = new Guid("e48a3661-51c1-4638-87da-7d7bdf6b459f")
                        },
                        new
                        {
                            Id = new Guid("7e231b63-30b5-4f9d-946e-cd23781c0beb"),
                            NumberOfSocket = 1,
                            ProductId = new Guid("b782f182-3802-4ef8-8e49-f8a48f1fd8a3"),
                            ProvidesUses = 1,
                            SocketId = new Guid("7190a380-dc61-44db-b4e1-1111c9c11d57")
                        },
                        new
                        {
                            Id = new Guid("1f3f2462-8dc1-4763-a8de-f342289e64c6"),
                            NumberOfSocket = 1,
                            ProductId = new Guid("90a79691-4f7d-43b2-875c-fe44d3fcfdde"),
                            ProvidesUses = 1,
                            SocketId = new Guid("9ebfab45-564a-45cd-b787-289fe75cf433")
                        },
                        new
                        {
                            Id = new Guid("d09b294f-ea4b-4478-a818-2aa3f85792f0"),
                            NumberOfSocket = 1,
                            ProductId = new Guid("6381e5b5-8d60-4109-9fe8-6fcfb73e20ea"),
                            ProvidesUses = 1,
                            SocketId = new Guid("c41c004d-0b61-4576-a732-27c1ae5b3785")
                        });
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.PropertyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("PropertyTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9a63b4a-d2d0-4963-b9fb-24da15622686"),
                            CategoryId = new Guid("61f9f877-85b8-42b1-a5a0-ffeba89b596b"),
                            Name = "Órajel"
                        },
                        new
                        {
                            Id = new Guid("469c5262-c495-4327-b39a-129fd6a6bbd2"),
                            CategoryId = new Guid("61f9f877-85b8-42b1-a5a0-ffeba89b596b"),
                            Name = "Magok száma"
                        },
                        new
                        {
                            Id = new Guid("32dfbae1-68df-416e-be73-0b959868b14d"),
                            CategoryId = new Guid("61f9f877-85b8-42b1-a5a0-ffeba89b596b"),
                            Name = "Szálak száma"
                        },
                        new
                        {
                            Id = new Guid("0402abd1-9d91-44e3-8207-525add7fb3b2"),
                            CategoryId = new Guid("50382070-40b1-42e9-a22d-0c79af948cfd"),
                            Name = "Méret"
                        },
                        new
                        {
                            Id = new Guid("ee2a6963-5ccd-4ef9-ab46-78b25f3e011e"),
                            CategoryId = new Guid("50382070-40b1-42e9-a22d-0c79af948cfd"),
                            Name = "Frekvencia"
                        });
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.PropertyValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropertyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("PropertyValues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ec36c53-c2d3-4694-83ca-7480cb84495e"),
                            ProductId = new Guid("7a97b0b5-49b3-4edc-bb95-128252180473"),
                            PropertyTypeId = new Guid("d9a63b4a-d2d0-4963-b9fb-24da15622686"),
                            Value = "3.80Ghz"
                        },
                        new
                        {
                            Id = new Guid("8ee761ec-cbbb-4465-913c-e92ed1187fec"),
                            ProductId = new Guid("7a97b0b5-49b3-4edc-bb95-128252180473"),
                            PropertyTypeId = new Guid("469c5262-c495-4327-b39a-129fd6a6bbd2"),
                            Value = "4"
                        },
                        new
                        {
                            Id = new Guid("6015bcba-bebc-4353-8810-8a6d14ab8ade"),
                            ProductId = new Guid("7a97b0b5-49b3-4edc-bb95-128252180473"),
                            PropertyTypeId = new Guid("32dfbae1-68df-416e-be73-0b959868b14d"),
                            Value = "8"
                        },
                        new
                        {
                            Id = new Guid("5b0218c3-eade-4828-8b8d-e0a29132f634"),
                            ProductId = new Guid("b782f182-3802-4ef8-8e49-f8a48f1fd8a3"),
                            PropertyTypeId = new Guid("d9a63b4a-d2d0-4963-b9fb-24da15622686"),
                            Value = "3.40Ghz"
                        },
                        new
                        {
                            Id = new Guid("25a4799a-437c-46be-baae-1547f66ce9c2"),
                            ProductId = new Guid("b782f182-3802-4ef8-8e49-f8a48f1fd8a3"),
                            PropertyTypeId = new Guid("469c5262-c495-4327-b39a-129fd6a6bbd2"),
                            Value = "4"
                        },
                        new
                        {
                            Id = new Guid("9992633b-d22b-4c2c-9593-822cc789e157"),
                            ProductId = new Guid("b782f182-3802-4ef8-8e49-f8a48f1fd8a3"),
                            PropertyTypeId = new Guid("32dfbae1-68df-416e-be73-0b959868b14d"),
                            Value = "4"
                        },
                        new
                        {
                            Id = new Guid("e6792b58-98e5-4a6c-b90f-7446df11df05"),
                            ProductId = new Guid("90a79691-4f7d-43b2-875c-fe44d3fcfdde"),
                            PropertyTypeId = new Guid("0402abd1-9d91-44e3-8207-525add7fb3b2"),
                            Value = "8GB"
                        },
                        new
                        {
                            Id = new Guid("409b594f-a85c-4415-90a0-800232387c27"),
                            ProductId = new Guid("90a79691-4f7d-43b2-875c-fe44d3fcfdde"),
                            PropertyTypeId = new Guid("ee2a6963-5ccd-4ef9-ab46-78b25f3e011e"),
                            Value = "3200Mhz"
                        },
                        new
                        {
                            Id = new Guid("164d49bf-17ea-4953-b1f1-48185ada8691"),
                            ProductId = new Guid("6381e5b5-8d60-4109-9fe8-6fcfb73e20ea"),
                            PropertyTypeId = new Guid("0402abd1-9d91-44e3-8207-525add7fb3b2"),
                            Value = "4GB"
                        },
                        new
                        {
                            Id = new Guid("c625d924-5b0a-4c35-a825-ada3db63a206"),
                            ProductId = new Guid("6381e5b5-8d60-4109-9fe8-6fcfb73e20ea"),
                            PropertyTypeId = new Guid("ee2a6963-5ccd-4ef9-ab46-78b25f3e011e"),
                            Value = "1600Mhz"
                        });
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.Socket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sockets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e48a3661-51c1-4638-87da-7d7bdf6b459f"),
                            Name = "LGA-1150"
                        },
                        new
                        {
                            Id = new Guid("7190a380-dc61-44db-b4e1-1111c9c11d57"),
                            Name = "LGA-775"
                        },
                        new
                        {
                            Id = new Guid("9ebfab45-564a-45cd-b787-289fe75cf433"),
                            Name = "DDR4"
                        },
                        new
                        {
                            Id = new Guid("c41c004d-0b61-4576-a732-27c1ae5b3785"),
                            Name = "DDR3"
                        });
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("OnlineComputerShop.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("OnlineComputerShop.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineComputerShop.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("OnlineComputerShop.Dal.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.BasketItem", b =>
                {
                    b.HasOne("OnlineComputerShop.Dal.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineComputerShop.Dal.Entities.User", "User")
                        .WithMany("BasketItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.CategorySocket", b =>
                {
                    b.HasOne("OnlineComputerShop.Dal.Entities.Category", "Category")
                        .WithMany("CategorySockets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineComputerShop.Dal.Entities.Socket", "Socket")
                        .WithMany("CategorySockets")
                        .HasForeignKey("SocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.Comment", b =>
                {
                    b.HasOne("OnlineComputerShop.Dal.Entities.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineComputerShop.Dal.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.Order", b =>
                {
                    b.HasOne("OnlineComputerShop.Dal.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.OrderItem", b =>
                {
                    b.HasOne("OnlineComputerShop.Dal.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineComputerShop.Dal.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.Product", b =>
                {
                    b.HasOne("OnlineComputerShop.Dal.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.ProductSocket", b =>
                {
                    b.HasOne("OnlineComputerShop.Dal.Entities.Product", "Product")
                        .WithMany("ProductSockets")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineComputerShop.Dal.Entities.Socket", "Socket")
                        .WithMany("ProductSockets")
                        .HasForeignKey("SocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.PropertyType", b =>
                {
                    b.HasOne("OnlineComputerShop.Dal.Entities.Category", "Category")
                        .WithMany("PropertyTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineComputerShop.Dal.Entities.PropertyValue", b =>
                {
                    b.HasOne("OnlineComputerShop.Dal.Entities.Product", "Product")
                        .WithMany("PropertyValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineComputerShop.Dal.Entities.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
